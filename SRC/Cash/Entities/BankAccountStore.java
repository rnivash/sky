package Cash.Entities;import com.google.appengine.api.datastore.Key;import com.google.appengine.api.datastore.KeyFactory;import Frame.Entities.*;import java.util.List;import Users.Entities.*;import javax.jdo.Query;public class BankAccountStore extends EntityStoreBase {    public BankAccountStore() {        pm = null;    }    public BankAccount AddAccount(BankAccount newAccount) {        try {            this.open();            pm.makePersistent(newAccount);        } catch (Exception ex) {            errorMsg = ex.getMessage();        } finally {            this.close();        }        return newAccount;    }    public BankAccount UpdateAccount(User user, BankAccount account) {        try {            this.open();            BankAccount account2 = GetBankAccount(account);            account2.setAmount(account.getAmount());            account2.setAccountName(account.getAccountName());            pm.makePersistent(account2);        } catch (Exception ex) {            errorMsg = ex.getMessage();        } finally {            this.close();        }        return account;    }    public void DeleteAccount(User user, BankAccount account) {        try {            this.open();            account = GetBankAccount(account);            pm.deletePersistent(account);        } catch (Exception ex) {            errorMsg = ex.getMessage();        } finally {            this.close();        }    }    private BankAccount GetBankAccount(BankAccount account) {        BankAccount result = null;        try {            Key k = KeyFactory.createKey(BankAccount.class.getSimpleName(), account.getKey().getId());            result = pm.getObjectById(BankAccount.class, k);        } finally {        }        return result;    }    public List<BankAccount> GetAccountDetails(User user) {        List<BankAccount> results = null;        try {            this.open();            Query q = pm.newQuery(BankAccount.class);            q.setFilter("userKey == favoriteFoodParam");            q.declareParameters(User.class.getName() + " favoriteFoodParam");            try {                results = (List<BankAccount>) q.execute(user.getKey());            } finally {                q.closeAll();            }        } finally {        }        return results;    }}